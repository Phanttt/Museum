// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Museum.Data;

#nullable disable

namespace Museum.Migrations
{
    [DbContext(typeof(MuseumContext))]
    partial class MuseumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcceptanceMaterial", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("materialsId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "materialsId");

                    b.HasIndex("materialsId");

                    b.ToTable("AcceptanceMaterial");
                });

            modelBuilder.Entity("AcceptanceState", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("statesId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "statesId");

                    b.HasIndex("statesId");

                    b.ToTable("AcceptanceState");
                });

            modelBuilder.Entity("AcceptanceTechnique", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("techniquesId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "techniquesId");

                    b.HasIndex("techniquesId");

                    b.ToTable("AcceptanceTechnique");
                });

            modelBuilder.Entity("CollectionDetailInfo", b =>
                {
                    b.Property<int>("collectionsid")
                        .HasColumnType("int");

                    b.Property<int>("detailInfosid")
                        .HasColumnType("int");

                    b.HasKey("collectionsid", "detailInfosid");

                    b.HasIndex("detailInfosid");

                    b.ToTable("CollectionDetailInfo");
                });

            modelBuilder.Entity("DetailInfoGroup", b =>
                {
                    b.Property<int>("detailInfosid")
                        .HasColumnType("int");

                    b.Property<int>("groupsid")
                        .HasColumnType("int");

                    b.HasKey("detailInfosid", "groupsid");

                    b.HasIndex("groupsid");

                    b.ToTable("DetailInfoGroup");
                });

            modelBuilder.Entity("DetailInfoKeyWord", b =>
                {
                    b.Property<int>("detailInfosid")
                        .HasColumnType("int");

                    b.Property<int>("keyWordsid")
                        .HasColumnType("int");

                    b.HasKey("detailInfosid", "keyWordsid");

                    b.HasIndex("keyWordsid");

                    b.ToTable("DetailInfoKeyWord");
                });

            modelBuilder.Entity("DetailInfoTag", b =>
                {
                    b.Property<int>("detailInfosid")
                        .HasColumnType("int");

                    b.Property<int>("tagsid")
                        .HasColumnType("int");

                    b.HasKey("detailInfosid", "tagsid");

                    b.HasIndex("tagsid");

                    b.ToTable("DetailInfoTag");
                });

            modelBuilder.Entity("EventReceiving", b =>
                {
                    b.Property<int>("eventsid")
                        .HasColumnType("int");

                    b.Property<int>("receivingsid")
                        .HasColumnType("int");

                    b.HasKey("eventsid", "receivingsid");

                    b.HasIndex("receivingsid");

                    b.ToTable("EventReceiving");
                });

            modelBuilder.Entity("Museum.Models.Acceptance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("insideN")
                        .HasColumnType("int");

                    b.Property<int>("inventoryN")
                        .HasColumnType("int");

                    b.Property<bool>("isDragMetal")
                        .HasColumnType("bit");

                    b.Property<bool>("isSpecFond")
                        .HasColumnType("bit");

                    b.Property<bool>("isWeapon")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("specFondNum")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("unifPassportId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("unifPassportId");

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("Museum.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Museum.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Collection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetailInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Fundid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Fundid");

                    b.ToTable("DetailInfos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Fund", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.KeyWord", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Chekerid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("Chekerid");

                    b.HasIndex("MuseumInfoId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.CheckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckTypes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Deleting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOnly")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("DeletingAct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("Deletings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Edit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Edits");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Exposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exposition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.ItemDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discovererid")
                        .HasColumnType("int");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Discovererid");

                    b.HasIndex("MuseumInfoId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("ItemDamages");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Box")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Closet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnExhibition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnExposition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnStorage")
                        .HasColumnType("bit");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeletingId")
                        .HasColumnType("int");

                    b.Property<int>("EditId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("StorageConditionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletingId");

                    b.HasIndex("EditId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StorageConditionId");

                    b.ToTable("MuseumInfos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExhibitionRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegativeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToxicityRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportationRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("ExpositionId")
                        .HasColumnType("int");

                    b.Property<bool>("InsideWork")
                        .HasColumnType("bit");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("ExpositionId");

                    b.HasIndex("MuseumInfoId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.StorageCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InSafe")
                        .HasColumnType("bit");

                    b.Property<string>("Light")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Safe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StorageConditions");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Audio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MediaId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Document", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MediaId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.GeneralInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ImageRightid")
                        .HasColumnType("int");

                    b.Property<string>("copyrightHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photographer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ImageRightid");

                    b.ToTable("GeneralInfo");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("MediaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.Property<string>("link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MediaId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.ImageRight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ImageRights");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Media", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("GeneralInfoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("GeneralInfoid");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Video", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MediaId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Currency", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Typeid")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latitute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Typeid");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.EventType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Owner", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.People", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Producer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Provider", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Purpose", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Purposes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.ReceiveWay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ReceiveWays");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Receiving", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Currencyid")
                        .HasColumnType("int");

                    b.Property<int>("Ownerid")
                        .HasColumnType("int");

                    b.Property<int>("Producerid")
                        .HasColumnType("int");

                    b.Property<int>("Providerid")
                        .HasColumnType("int");

                    b.Property<int>("Purposeid")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveWayid")
                        .HasColumnType("int");

                    b.Property<int>("Statusid")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descriptionFP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("periodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("periodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<byte[]>("priceAct")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("receiptAct")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("receiptAgreement")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("Currencyid");

                    b.HasIndex("Ownerid");

                    b.HasIndex("Producerid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Purposeid");

                    b.HasIndex("ReceiveWayid");

                    b.HasIndex("Statusid");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Status", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Structure", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.DragMetal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DragMetalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Probe")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProbeActScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("WeightGramm")
                        .HasColumnType("real");

                    b.Property<float>("WeightKarat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("DragMetals");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.SpecFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DragMetalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DragMetalId");

                    b.HasIndex("WeaponId");

                    b.ToTable("SpecFunds");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmmoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ExpertizionScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAmmo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuseumWeapon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfWeapon")
                        .HasColumnType("bit");

                    b.Property<bool>("MMG")
                        .HasColumnType("bit");

                    b.Property<string>("PartOfWeaponName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PassportScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Museum.Models.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("Museum.Models.UnifPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DetailInfoid")
                        .HasColumnType("int");

                    b.Property<int?>("Mediaid")
                        .HasColumnType("int");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("Receivingid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoid");

                    b.HasIndex("Mediaid");

                    b.HasIndex("MuseumInfoId");

                    b.HasIndex("Receivingid");

                    b.ToTable("UnifPassports");
                });

            modelBuilder.Entity("Museum.Models.Users.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Museum.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Roleid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PeopleReceiving", b =>
                {
                    b.Property<int>("peoplesid")
                        .HasColumnType("int");

                    b.Property<int>("receivingsid")
                        .HasColumnType("int");

                    b.HasKey("peoplesid", "receivingsid");

                    b.HasIndex("receivingsid");

                    b.ToTable("PeopleReceiving");
                });

            modelBuilder.Entity("ReceivingStructure", b =>
                {
                    b.Property<int>("receivingsid")
                        .HasColumnType("int");

                    b.Property<int>("structuresid")
                        .HasColumnType("int");

                    b.HasKey("receivingsid", "structuresid");

                    b.HasIndex("structuresid");

                    b.ToTable("ReceivingStructure");
                });

            modelBuilder.Entity("AcceptanceMaterial", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("materialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcceptanceState", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.State", null)
                        .WithMany()
                        .HasForeignKey("statesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcceptanceTechnique", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Technique", null)
                        .WithMany()
                        .HasForeignKey("techniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectionDetailInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Collection", null)
                        .WithMany()
                        .HasForeignKey("collectionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany()
                        .HasForeignKey("detailInfosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DetailInfoGroup", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany()
                        .HasForeignKey("detailInfosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Group", null)
                        .WithMany()
                        .HasForeignKey("groupsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DetailInfoKeyWord", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany()
                        .HasForeignKey("detailInfosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("keyWordsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DetailInfoTag", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany()
                        .HasForeignKey("detailInfosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Tag", null)
                        .WithMany()
                        .HasForeignKey("tagsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventReceiving", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Event", null)
                        .WithMany()
                        .HasForeignKey("eventsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany()
                        .HasForeignKey("receivingsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Museum.Models.Acceptance", b =>
                {
                    b.HasOne("Museum.Models.UnifPassport", "unifPassport")
                        .WithMany()
                        .HasForeignKey("unifPassportId");

                    b.Navigation("unifPassport");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetailInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("Fundid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Check", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.CheckType", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Users.User", "Cheker")
                        .WithMany()
                        .HasForeignKey("Chekerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("Checks")
                        .HasForeignKey("MuseumInfoId");

                    b.Navigation("CheckType");

                    b.Navigation("Cheker");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Deleting", b =>
                {
                    b.HasOne("Museum.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.ItemDamage", b =>
                {
                    b.HasOne("Museum.Models.Users.User", "Discoverer")
                        .WithMany()
                        .HasForeignKey("Discovererid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("ItemDamage")
                        .HasForeignKey("MuseumInfoId");

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discoverer");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Location", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Deleting", "Deleting")
                        .WithMany()
                        .HasForeignKey("DeletingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Edit", "Edit")
                        .WithMany()
                        .HasForeignKey("EditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.StorageCondition", "StorageCondition")
                        .WithMany()
                        .HasForeignKey("StorageConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deleting");

                    b.Navigation("Edit");

                    b.Navigation("Location");

                    b.Navigation("StorageCondition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Reservation", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Exhibition", "Exhibition")
                        .WithMany()
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Exposition", "Exposition")
                        .WithMany()
                        .HasForeignKey("ExpositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("Reservations")
                        .HasForeignKey("MuseumInfoId");

                    b.Navigation("Exhibition");

                    b.Navigation("Exposition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Audio", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany("Audios")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Document", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany("Documents")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.GeneralInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.ImageRight", "ImageRight")
                        .WithMany()
                        .HasForeignKey("ImageRightid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageRight");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Image", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany("Images")
                        .HasForeignKey("MediaId");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Media", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.GeneralInfo", "GeneralInfo")
                        .WithMany()
                        .HasForeignKey("GeneralInfoid");

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Video", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany("Videos")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Event", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.EventType", "Type")
                        .WithMany()
                        .HasForeignKey("Typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Receiving", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("Currencyid");

                    b.HasOne("Museum.Models.Tabs.Receiving.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("Ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("Producerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("Providerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Purpose", "Purpose")
                        .WithMany()
                        .HasForeignKey("Purposeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.ReceiveWay", "ReceiveWay")
                        .WithMany()
                        .HasForeignKey("ReceiveWayid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Status", "Status")
                        .WithMany()
                        .HasForeignKey("Statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Owner");

                    b.Navigation("Producer");

                    b.Navigation("Provider");

                    b.Navigation("Purpose");

                    b.Navigation("ReceiveWay");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.SpecFund", b =>
                {
                    b.HasOne("Museum.Models.Tabs.SpecFund.DragMetal", "DragMetal")
                        .WithMany()
                        .HasForeignKey("DragMetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.SpecFund.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DragMetal");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Museum.Models.UnifPassport", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", "DetailInfo")
                        .WithMany()
                        .HasForeignKey("DetailInfoid");

                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Mediaid");

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", "MuseumInfo")
                        .WithMany()
                        .HasForeignKey("MuseumInfoId");

                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", "Receiving")
                        .WithMany()
                        .HasForeignKey("Receivingid");

                    b.Navigation("DetailInfo");

                    b.Navigation("Media");

                    b.Navigation("MuseumInfo");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("Museum.Models.Users.User", b =>
                {
                    b.HasOne("Museum.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PeopleReceiving", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.People", null)
                        .WithMany()
                        .HasForeignKey("peoplesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany()
                        .HasForeignKey("receivingsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReceivingStructure", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany()
                        .HasForeignKey("receivingsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Structure", null)
                        .WithMany()
                        .HasForeignKey("structuresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ItemDamage");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Media", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("Documents");

                    b.Navigation("Images");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
