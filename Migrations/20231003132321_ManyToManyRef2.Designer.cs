// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Museum.Data;

#nullable disable

namespace Museum.Migrations
{
    [DbContext(typeof(MuseumContext))]
    [Migration("20231003132321_ManyToManyRef2")]
    partial class ManyToManyRef2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcceptanceMaterial", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("materialsId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "materialsId");

                    b.HasIndex("materialsId");

                    b.ToTable("AcceptanceMaterial");
                });

            modelBuilder.Entity("AcceptanceState", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("statesId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "statesId");

                    b.HasIndex("statesId");

                    b.ToTable("AcceptanceState");
                });

            modelBuilder.Entity("AcceptanceTechnique", b =>
                {
                    b.Property<int>("acceptancesid")
                        .HasColumnType("int");

                    b.Property<int>("techniquesId")
                        .HasColumnType("int");

                    b.HasKey("acceptancesid", "techniquesId");

                    b.HasIndex("techniquesId");

                    b.ToTable("AcceptanceTechnique");
                });

            modelBuilder.Entity("Museum.Models.Acceptance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("insideN")
                        .HasColumnType("int");

                    b.Property<int>("inventoryN")
                        .HasColumnType("int");

                    b.Property<bool>("isDragMetal")
                        .HasColumnType("bit");

                    b.Property<bool>("isSpecFond")
                        .HasColumnType("bit");

                    b.Property<bool>("isWeapon")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("specFondNum")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("unifPassportId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("unifPassportId");

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("Museum.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Museum.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.HasIndex("countryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassifName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemsGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Complex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("RefferTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Complexes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Decoding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InscriptLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscriptOriginal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscriptTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Decodings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.ToTable("DetLinks");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetailInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<float>("DSTUSize")
                        .HasColumnType("real");

                    b.Property<int>("DecodingId")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplex")
                        .HasColumnType("bit");

                    b.Property<string>("Restavration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimilarItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thanks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("DecodingId");

                    b.HasIndex("FormId");

                    b.HasIndex("FundId");

                    b.HasIndex("genderId");

                    b.ToTable("DetailInfos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Dimentions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Diameter")
                        .HasColumnType("real");

                    b.Property<string>("DiameterUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("HeightUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LenghtUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Thickness")
                        .HasColumnType("real");

                    b.Property<string>("ThicknessUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WallThickness")
                        .HasColumnType("real");

                    b.Property<string>("WallThicknessUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.Property<string>("WidthUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("lenght")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Dimentions");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Inscript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InscriptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MarkingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarkingId");

                    b.ToTable("Inscripts");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.KeyWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WIKILink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Marking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Markings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Research", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Stamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MarkingId")
                        .HasColumnType("int");

                    b.Property<string>("StampName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarkingId");

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DetailInfoId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CheckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ChekerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CheckTypeId");

                    b.HasIndex("ChekerId");

                    b.HasIndex("MuseumInfoId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.CheckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckTypes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Deleting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOnly")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("DeletingAct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Deletings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Edit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Edits");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Exposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exposition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.ItemDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscovererId")
                        .HasColumnType("int");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscovererId");

                    b.HasIndex("MuseumInfoId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("ItemDamages");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Box")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Closet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnExhibition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnExposition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnStorage")
                        .HasColumnType("bit");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeletingId")
                        .HasColumnType("int");

                    b.Property<int>("EditId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("StorageConditionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletingId");

                    b.HasIndex("EditId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StorageConditionId");

                    b.ToTable("MuseumInfos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExhibitionRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegativeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToxicityRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportationRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentRec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("ExpositionId")
                        .HasColumnType("int");

                    b.Property<bool>("InsideWork")
                        .HasColumnType("bit");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("ExpositionId");

                    b.HasIndex("MuseumInfoId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.StorageCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InSafe")
                        .HasColumnType("bit");

                    b.Property<string>("Light")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Safe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StorageConditions");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Audio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Document", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.GeneralInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ImageRightid")
                        .HasColumnType("int");

                    b.Property<string>("copyrightHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<string>("photographer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ImageRightid");

                    b.ToTable("GeneralInfo");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Mediaid")
                        .HasColumnType("int");

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Mediaid");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.ImageRight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ImageRights");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Media", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.HasKey("id");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Video", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingId");

                    b.HasIndex("TypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingId")
                        .HasColumnType("int");

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingId");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identif")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TransferAct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("TransferAgreement")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Сaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Purpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Purposes");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.ReceiveWay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceiveWays");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionFP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("PurposeId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveWayId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("periodFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("periodTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("priceAct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("receiptAct")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("receiptAgreement")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("ReceiveWayId");

                    b.HasIndex("StatusId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceivingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.TimeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CloseTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CopyrightPeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShelfLifeEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TimeLimits");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.DragMetal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DragMetalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Probe")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProbeActScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("WeightGramm")
                        .HasColumnType("real");

                    b.Property<float>("WeightKarat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("DragMetals");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.SpecFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DragMetalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DragMetalId");

                    b.HasIndex("WeaponId");

                    b.ToTable("SpecFunds");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmmoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ExpertizionScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAmmo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuseumWeapon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfWeapon")
                        .HasColumnType("bit");

                    b.Property<bool>("MMG")
                        .HasColumnType("bit");

                    b.Property<string>("PartOfWeaponName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PassportScan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Museum.Models.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("Museum.Models.UnifPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComplexId")
                        .HasColumnType("int");

                    b.Property<int?>("DetailInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("Mediaid")
                        .HasColumnType("int");

                    b.Property<int?>("MuseumInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.HasIndex("DetailInfoId");

                    b.HasIndex("Mediaid");

                    b.HasIndex("MuseumInfoId");

                    b.HasIndex("ReceivingId");

                    b.ToTable("UnifPassports");
                });

            modelBuilder.Entity("Museum.Models.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Museum.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AcceptanceMaterial", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("materialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcceptanceState", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.State", null)
                        .WithMany()
                        .HasForeignKey("statesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcceptanceTechnique", b =>
                {
                    b.HasOne("Museum.Models.Acceptance", null)
                        .WithMany()
                        .HasForeignKey("acceptancesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Technique", null)
                        .WithMany()
                        .HasForeignKey("techniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Museum.Models.Acceptance", b =>
                {
                    b.HasOne("Museum.Models.UnifPassport", "unifPassport")
                        .WithMany()
                        .HasForeignKey("unifPassportId");

                    b.Navigation("unifPassport");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.City", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("cities")
                        .HasForeignKey("DetailInfoId");

                    b.HasOne("Museum.Models.Tabs.Info.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Collection", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("collections")
                        .HasForeignKey("DetailInfoId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetLink", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("Links")
                        .HasForeignKey("DetailInfoId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetailInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Decoding", "Decoding")
                        .WithMany()
                        .HasForeignKey("DecodingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Info.Gender", "gender")
                        .WithMany()
                        .HasForeignKey("genderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");

                    b.Navigation("Decoding");

                    b.Navigation("Form");

                    b.Navigation("Fund");

                    b.Navigation("gender");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Group", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("groups")
                        .HasForeignKey("DetailInfoId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Inscript", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Marking", null)
                        .WithMany("inscripts")
                        .HasForeignKey("MarkingId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.KeyWord", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("KeyWords")
                        .HasForeignKey("DetailInfoId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Stamp", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Marking", null)
                        .WithMany("stamps")
                        .HasForeignKey("MarkingId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Tag", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", null)
                        .WithMany("Tags")
                        .HasForeignKey("DetailInfoId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Check", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.CheckType", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Users.User", "Cheker")
                        .WithMany()
                        .HasForeignKey("ChekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("Checks")
                        .HasForeignKey("MuseumInfoId");

                    b.Navigation("CheckType");

                    b.Navigation("Cheker");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Deleting", b =>
                {
                    b.HasOne("Museum.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.ItemDamage", b =>
                {
                    b.HasOne("Museum.Models.Users.User", "Discoverer")
                        .WithMany()
                        .HasForeignKey("DiscovererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("ItemDamage")
                        .HasForeignKey("MuseumInfoId");

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discoverer");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Location", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Deleting", "Deleting")
                        .WithMany()
                        .HasForeignKey("DeletingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Edit", "Edit")
                        .WithMany()
                        .HasForeignKey("EditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.StorageCondition", "StorageCondition")
                        .WithMany()
                        .HasForeignKey("StorageConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deleting");

                    b.Navigation("Edit");

                    b.Navigation("Location");

                    b.Navigation("StorageCondition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.Reservation", b =>
                {
                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Exhibition", "Exhibition")
                        .WithMany()
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.Exposition", "Exposition")
                        .WithMany()
                        .HasForeignKey("ExpositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", null)
                        .WithMany("Reservations")
                        .HasForeignKey("MuseumInfoId");

                    b.Navigation("Exhibition");

                    b.Navigation("Exposition");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.GeneralInfo", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.ImageRight", "ImageRight")
                        .WithMany()
                        .HasForeignKey("ImageRightid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageRight");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Media.Image", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Mediaid");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Event", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany("events")
                        .HasForeignKey("ReceivingId");

                    b.HasOne("Museum.Models.Tabs.Receiving.EventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Link", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.People", null)
                        .WithMany("links")
                        .HasForeignKey("PeopleId");

                    b.HasOne("Museum.Models.Tabs.Receiving.Provider", null)
                        .WithMany("links")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Owner", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany("Owners")
                        .HasForeignKey("ReceivingId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.People", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany("peoples")
                        .HasForeignKey("ReceivingId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Provider", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Receiving", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Purpose", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.ReceiveWay", "ReceiveWay")
                        .WithMany()
                        .HasForeignKey("ReceiveWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.Receiving.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Producer");

                    b.Navigation("Provider");

                    b.Navigation("Purpose");

                    b.Navigation("ReceiveWay");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Structure", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", null)
                        .WithMany("structures")
                        .HasForeignKey("ReceivingId");
                });

            modelBuilder.Entity("Museum.Models.Tabs.SpecFund.SpecFund", b =>
                {
                    b.HasOne("Museum.Models.Tabs.SpecFund.DragMetal", "DragMetal")
                        .WithMany()
                        .HasForeignKey("DragMetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Museum.Models.Tabs.SpecFund.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DragMetal");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Museum.Models.UnifPassport", b =>
                {
                    b.HasOne("Museum.Models.Tabs.Info.Complex", null)
                        .WithMany("AdditionsItems")
                        .HasForeignKey("ComplexId");

                    b.HasOne("Museum.Models.Tabs.Info.DetailInfo", "DetailInfo")
                        .WithMany()
                        .HasForeignKey("DetailInfoId");

                    b.HasOne("Museum.Models.Tabs.Media.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Mediaid");

                    b.HasOne("Museum.Models.Tabs.InsideMuseum.MuseumInfo", "MuseumInfo")
                        .WithMany()
                        .HasForeignKey("MuseumInfoId");

                    b.HasOne("Museum.Models.Tabs.Receiving.Receiving", "Receiving")
                        .WithMany()
                        .HasForeignKey("ReceivingId");

                    b.Navigation("DetailInfo");

                    b.Navigation("Media");

                    b.Navigation("MuseumInfo");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("Museum.Models.Users.User", b =>
                {
                    b.HasOne("Museum.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Complex", b =>
                {
                    b.Navigation("AdditionsItems");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.DetailInfo", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Links");

                    b.Navigation("Tags");

                    b.Navigation("cities");

                    b.Navigation("collections");

                    b.Navigation("groups");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Info.Marking", b =>
                {
                    b.Navigation("inscripts");

                    b.Navigation("stamps");
                });

            modelBuilder.Entity("Museum.Models.Tabs.InsideMuseum.MuseumInfo", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ItemDamage");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.People", b =>
                {
                    b.Navigation("links");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Provider", b =>
                {
                    b.Navigation("links");
                });

            modelBuilder.Entity("Museum.Models.Tabs.Receiving.Receiving", b =>
                {
                    b.Navigation("Owners");

                    b.Navigation("events");

                    b.Navigation("peoples");

                    b.Navigation("structures");
                });
#pragma warning restore 612, 618
        }
    }
}
